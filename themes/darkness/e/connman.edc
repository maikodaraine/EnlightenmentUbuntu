#define MSG_ID_STRENGTH 1

#define CONNMAN_STATE_PART_ADD() \
         part { \
            name: "state"; \
            type: IMAGE; \
            mouse_events: 0; \
            description { \
               state: "default" 0.0; \
               aspect: 1 1; \
               aspect_preference: BOTH; \
               color: 255 255 255 0; \
               image.normal: "connman_status_ready"; \
               rel1.relative: 0.8 0.8; \
               rel2.relative: 1 1; \
               align: 1 1; \
               min: 8 8; \
            } \
            description { \
               state: "ready" 0.0; \
               inherit: "default" 0.0; \
               color: 255 255 255 255; \
            } \
            description { \
               state: "online" 0.0; \
               inherit: "default" 0.0; \
               color: 255 255 255 255; \
               image.normal: "connman_status_online"; \
            } \
         }

#define CONNMAN_IMAGES_SET(_name, _min) \
         images { \
            set { \
               name: "connman_"##_name; \
               image { \
                  image: "connman_"##_name##"_128.png" COMP; \
                  size: (_min+1) (_min+1) 1000 1000; \
               } \
               image { \
                  image: "connman_"##_name##"_32.png" COMP; \
                  size: 1 1 _min _min; \
               } \
            } \
         } \


#define CONNMAN_ICON(_icon) \
   group { \
      name: "e/modules/connman/icon/"##_icon; \
      script { \
         public message(Msg_Type:type, id, ...) { \
            if ((type == MSG_INT_SET) && (id == MSG_ID_STRENGTH)) { \
               new state = getarg(2); \
               /* Connecting if in association or configuration */ \
               if ((state == 2)) \
               { \
                  set_state(PART:"state", "default", 0.0); \
                  run_program(PROGRAM:"connecting"); \
                  return; \
               } \
               if ((state == 3)) \
                  return; \
               if ((state == 4)) \
                  set_state(PART:"state", "ready", 0.0); \
               else if ((state == 5)) \
                  set_state(PART:"state", "online", 0.0); \
               else \
                  set_state(PART:"state", "default", 0.0); \
               set_state(PART:"icon", "default", 0.0); \
            } \
         } \
      } \
      parts { \
         CONNMAN_IMAGES_SET(_icon, 32) \
         part { \
            name: "icon"; \
            type: IMAGE; \
            mouse_events: 0; \
            description { \
               state: "default" 0.0; \
               aspect: 1 1; \
               aspect_preference: BOTH; \
               image.normal: "connman_"##_icon##; \
            } \
            description { \
               state: "hidden" 0.0; \
               inherit: "default" 0.0; \
               color: 255 255 255 0; \
            } \
         } \
         CONNMAN_STATE_PART_ADD() \
      } \
      programs { \
         program { \
            name: "connecting"; \
            action: STATE_SET "hidden" 0.0; \
            transition: ACCEL 0.3; \
            target: "icon"; \
            after: "connecting,2"; \
         } \
         program { \
            name: "connecting,2"; \
            action: STATE_SET "default" 0.0; \
            transition: DECEL 0.3; \
            target: "icon"; \
            after: "connecting"; \
         } \
      } \
   }

CONNMAN_ICON(bluetooth)
CONNMAN_ICON(cellular)
CONNMAN_ICON(ethernet)

#undef CONNMAN_ICON

   group {
      name: "e/modules/connman/icon/wifi";

#define CONNMAN_BAR_IMAGES_SET(_name) \
         images { \
            set { \
               name: "wifi_bar_"##_name; \
               image { \
                  image: "connman_wifi_"##_name##"_128.png" COMP; \
                  /* FIXME: check why it doesn't work */ \
                  /* size: 33 33 128 128; \ */ \
                  size: 33 33 1000 1000; \
               } \
               image { \
                  image: "connman_wifi_"##_name##"_32.png" COMP; \
                  size: 1 1 32 32; \
               } \
            } \
         } \

#define CONNMAN_BAR_ON(_name) \
         CONNMAN_BAR_IMAGES_SET(_name) \
         part { \
            name: "bar_"##_name; \
            type: IMAGE; \
            mouse_events: 0; \
            description { \
               state: "default" 0.0; \
               aspect: 1 1; \
               aspect_preference: BOTH; \
               color: 255 255 255 0; \
               image.normal: "wifi_bar_"##_name; \
            } \
            description { \
               state: "visible" 0.0; \
               inherit: "default" 0.0; \
               color: 255 255 255 255; \
            } \
         }

#define CONNMAN_CONNECTING_ON(_cur, _next) \
         program { \
            name: "connecting,"##_cur##",on"; \
            action: STATE_SET "visible" 0.0; \
            transition: ACCELERATE 0.2; \
            target: "bar_"##_cur##"_on"; \
            after: "connecting,"##_cur##",off"; \
            after: "connecting,"##_next##",on"; \
         }

#define CONNMAN_CONNECTING_OFF(_cur) \
         program { \
            name: "connecting,"##_cur##",off"; \
            action: STATE_SET "default" 0.0; \
            transition: DECELERATE 0.2; \
            target: "bar_"##_cur##"_on"; \
         }

      script {
         public message(Msg_Type:type, id, ...) {
            if ((type == MSG_INT_SET) && (id == MSG_ID_STRENGTH)) {
               new state = getarg(2);
               new Float:str = getarg(3);

               /* Connecting if in association or configuration */
               if ((state == 2))
               {
                  set_state(PART:"state", "default", 0.0);
                  run_program(PROGRAM:"connecting");
                  return;
               }
               if ((state == 3))
                  return;

               if ((state == 4))
                  set_state(PART:"state", "ready", 0.0);
               else if ((state == 5))
                  set_state(PART:"state", "online", 0.0);
               else
                  set_state(PART:"state", "default", 0.0);

               set_state(PART:"bar_0_on", "visible", 0.0);
               set_tween_state(PART:"bar_1_on", (str - (100/3) * 0) / (100/3),
                     "default", 0.0, "visible", 0.0);
               set_tween_state(PART:"bar_2_on", (str - (100/3) * 1) / (100/3),
                     "default", 0.0, "visible", 0.0);
               set_tween_state(PART:"bar_3_on", (str - (100/3) * 2) / (100/3),
                     "default", 0.0, "visible", 0.0);
            }
         }
      }

      parts {

         CONNMAN_BAR_IMAGES_SET(off)
         CONNMAN_BAR_IMAGES_SET(not)
         part {
            name: "bar_off";
            type: IMAGE;
            mouse_events: 0;
            description {
               state: "default" 0.0;
               aspect: 1 1;
               aspect_preference: BOTH;
               image.normal: "wifi_bar_off";
            }
            description {
               state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 0;
            }
         }

         CONNMAN_BAR_ON(0_on)
         CONNMAN_BAR_ON(1_on)
         CONNMAN_BAR_ON(2_on)
         CONNMAN_BAR_ON(3_on)

         part {
            name: "bar_not";
            type: IMAGE;
            mouse_events: 0;
            description {
               state: "default" 0.0;
               aspect: 1 1;
               aspect_preference: BOTH;
               image.normal: "wifi_bar_not";
               color: 255 255 255 0;
            }
            description {
               state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
            }
         }
         CONNMAN_IMAGES_SET(status_ready, 8)
         CONNMAN_IMAGES_SET(status_online, 8)
         CONNMAN_STATE_PART_ADD()
      }
      programs {
         program {
            name: "connman,enabled";
            signal: "e,available";
            source: "e";
            action: STATE_SET "default" 0.0;
            target: "bar_not";
            target: "bar_off";
         }
         program {
            name: "connman,disabled";
            signal: "e,unavailable";
            source: "e";
            action: STATE_SET "default" 0.0;
            target: "bar_0_on";
            target: "bar_1_on";
            target: "bar_2_on";
            target: "bar_3_on";
            after: "connman,disabled,2";
         }
         program {
            name: "connman,disabled,2";
            action: STATE_SET "disabled" 0.0;
            target: "bar_not";
            target: "bar_off";
         }
         program {
            name: "connecting";
            action: STATE_SET "default" 0.0;
            target: "bar_1_on";
            target: "bar_2_on";
            target: "bar_3_on";
            after: "connecting,2";
         }
         program {
            name: "connecting,2";
            action: STATE_SET "visible" 0.0;
            target: "bar_0_on";
            after: "connecting,1,on";
         }
         CONNMAN_CONNECTING_ON(1, 2)
         CONNMAN_CONNECTING_ON(2, 3)
         CONNMAN_CONNECTING_ON(3, 1)
         CONNMAN_CONNECTING_OFF(1)
         CONNMAN_CONNECTING_OFF(2)
         CONNMAN_CONNECTING_OFF(3)
      }

#undef CONNMAN_BAR_IMAGES_SET
#undef CONNMAN_BAR_ON
#undef CONNMAN_CONNECTING_ON
#undef CONNMAN_CONNECTING_OFF
#undef MSG_ID_STRENGTH

   }

   group {
      name: "e/modules/connman/main";

#define CONNMAN_TECH_ICON_ADD(_tech) \
         part { \
            name: #_tech##"_icon"; \
            type: GROUP; \
            mouse_events: 0; \
            source: "e/modules/connman/icon/"##_tech; \
            description { \
               state: "default" 0.0; \
               visible: 0; \
            } \
            description { \
               state: "visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
            } \
         } \
         program { \
            name: "technology_"##_tech; \
            signal: "e,changed,technology,"##_tech; \
            source: "e"; \
            action: STATE_SET "default" 0.0; \
            target: "wifi_icon"; \
            target: "ethernet_icon"; \
            target: "cellular_icon"; \
            target: "bluetooth_icon"; \
            after: "technology_"##_tech##",2"; \
         } \
         program { \
            name: "technology_"##_tech##",2"; \
            action: STATE_SET "visible" 0.0; \
            target: #_tech##"_icon"; \
         }

      parts {
         part {
            name: "eventarea";
            type: RECT;
            mouse_events: 1;
            description {
               state: "default" 0.0;
               color: 255 255 255 0;
            }
         }
         CONNMAN_TECH_ICON_ADD(wifi)
         CONNMAN_TECH_ICON_ADD(ethernet)
         CONNMAN_TECH_ICON_ADD(cellular)
         CONNMAN_TECH_ICON_ADD(bluetooth)
      }
      programs {
         program {
            name: "technology_other";
            signal: "e,changed,technology,other";
            source: "e";
            after: "technology_wifi";
         }
         program {
            name: "connman,disabled";
            signal: "e,unavailable";
            source: "e";
            after: "connman,enabled";
         }
         program {
            name: "connman,enabled";
            signal: "e,available";
            source: "e";
            action: STATE_SET "default" 0.0;
            target: "wifi_icon";
            target: "ethernet_icon";
            target: "cellular_icon";
            target: "bluetooth_icon";
            after: "connman,enabled,2";
         }
         program {
            name: "connman,enabled,2";
            action: STATE_SET "visible" 0.0;
            target: "wifi_icon";
         }
      }
#undef CONNMAN_TECH_ICON_ADD
   }

   group {
      name: "e/modules/connman/end";

      CONNMAN_IMAGES_SET(security1, 32)
      CONNMAN_IMAGES_SET(security2, 32)

      parts {
         part {
            name: "security";
            type: IMAGE;
            mouse_events: 0;
            description {
               state: "default" 0.0;
               aspect: 1 1;
               aspect_preference: BOTH;
               color: 255 255 255 0;
               image.normal: "connman_security1";
            }
            description {
               state: "almost_secure" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
            }
            description {
               state: "secure" 0.0;
               inherit: "default" 0.0;
               color: 255 255 255 255;
               image.normal: "connman_security2";
            }
         }
      }
      programs {
         program {
            name: "security,off";
            signal: "e,security,off";
            source: "e";
            action: STATE_SET "default" 0.0;
            target: "security";
         }
         program {
            name: "security,none";
            signal: "e,security,none";
            source: "e";
            action: STATE_SET "default" 0.0;
            target: "security";
         }
         program {
            name: "security,almost_secure";
            signal: "e,security,wep";
            source: "e";
            action: STATE_SET "almost_secure" 0.0;
            target: "security";
         }
         program {
            name: "security,secure";
            signal: "e,security,psk";
            source: "e";
            action: STATE_SET "secure" 0.0;
            target: "security";
         }
      }
   }

#undef CONNMAN_STATE_PART_ADD
#undef CONNMAN_IMAGES_SET
