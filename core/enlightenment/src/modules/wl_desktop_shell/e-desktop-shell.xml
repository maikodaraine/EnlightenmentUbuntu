<protocol name="desktop">

  <interface name="e_desktop_shell" version="2">
    <request name="set_background">
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_panel">
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="set_lock_surface">
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="unlock"/>

    <request name="set_grab_surface">
      <arg name="surface" type="object" interface="wl_surface"/>
    </request>

    <request name="desktop_ready" since="2">
      <description summary="desktop is ready to be shown">
	Tell the server, that enough desktop elements have been drawn
	to make the desktop look ready for use. During start-up, the
	server can wait for this request with a black screen before
	starting to fade in the desktop, for instance. If the client
	parts of a desktop take a long time to initialize, we avoid
	showing temporary garbage.
      </description>
    </request>

    <!-- We'll fold most of wl_shell into this interface and then
         they'll share the configure event.  -->
    <event name="configure">
      <arg name="edges" type="uint"/>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="width" type="int"/>
      <arg name="height" type="int"/>
    </event>

    <!-- Tell the shell we want it to create and set the lock surface,
         which is a GUI asking the user to unlock the screen. The lock
         surface is announced with 'set_lock_surface'. Whether or not
         the shell actually implements locking, it MUST send 'unlock'
         request to let the normal desktop resume. -->
    <event name="prepare_lock_surface"/>
    <event name="grab_cursor">
      <arg name="cursor" type="uint"/>
    </event>

    <enum name="cursor">
      <entry name="none" value="0"/>

      <entry name="resize_top" value="1"/>
      <entry name="resize_bottom" value="2"/>

      <entry name="arrow" value="3"/>

      <entry name="resize_left" value="4"/>
      <entry name="resize_top_left" value="5"/>
      <entry name="resize_bottom_left" value="6"/>

      <entry name="move" value="7"/>

      <entry name="resize_right" value="8"/>
      <entry name="resize_top_right" value="9"/>
      <entry name="resize_bottom_right" value="10"/>

      <entry name="busy" value="11"/>
    </enum>

  </interface>

  <!-- Only one client can bind this interface at a time. -->
  <interface name="screensaver" version="1">

    <!-- Set the surface type as a screensaver for a particular output.
         A screensaver surface is normally hidden, and only visible after
         an idle timeout. -->
    <request name="set_surface">
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="output" type="object" interface="wl_output"/>
    </request>

  </interface>

</protocol>
